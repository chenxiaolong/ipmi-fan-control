---
on:
  push:
    # Uncomment to test against a branch
    #branches:
    #  - ci
    tags:
      - 'v*'
jobs:
  create_release:
    name: Create GitHub release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              version=${GITHUB_REF#refs/tags/v}
          else
              version=0.0.0.${GITHUB_REF#refs/heads/}
          fi
          echo "::set-output name=version::${version}"

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Version ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: Build project
    needs: create_release
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
    strategy:
      fail-fast: false
      matrix:
        # Once Windows support is complete, windows-latest can be added
        os: [ubuntu-20.04]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Rust LLVM target triple
        id: get_target
        shell: bash
        run: |
          echo -n '::set-output name=name::'
          RUSTC_BOOTSTRAP=1 rustc -Z unstable-options --print target-spec-json \
              | jq -r '."llvm-target"'

      - name: Install clippy
        run: rustup component add clippy

      - name: Run clippy checks in release mode
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo clippy --release -- -D warnings

      - name: Build in release mode
        run: cargo build --release --verbose

      - name: Strip release binary (non-Windows)
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-latest'
        run: strip target/release/ipmi-fan-control

      - name: Build archive
        shell: bash
        run: |
          base_name=ipmi-fan-control-${{ needs.create_release.outputs.version }}-${{ steps.get_target.outputs.name }}
          mkdir "${base_name}"
          cp {README.md,LICENSE} "${base_name}/"

          if [[ "${{ matrix.os }}" == windows-* ]]; then
              cp target/release/ipmi-fan-control.exe "${base_name}/"
              7z a "${base_name}.zip" "${base_name}"
              echo "ASSET=${base_name}.zip" >> "${GITHUB_ENV}"
          else
              cp target/release/ipmi-fan-control "${base_name}/"
              tar -Jcvf "${base_name}.tar.xz" "${base_name}"
              echo "ASSET=${base_name}.tar.xz" >> "${GITHUB_ENV}"
          fi

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ${{ env.ASSET }}
          asset_path: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  build_source_packages:
    name: Build source packages
    needs:
      - create_release
      # Intentionally make this sequential, so we don't publish a release to OBS
      # that doesn't build
      - build
    runs-on: ubuntu-20.04
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build all source packages
        env:
          VERSION_OVERRIDE: ${{ needs.create_release.outputs.version }}
        run: |
          sudo apt-get -y update
          sudo apt-get -y install cargo debhelper devscripts dh-exec
          ./dist/build_source_package.sh -t tarball
          ./dist/build_source_package.sh -t srpm
          ./dist/build_source_package.sh -t pkgbuild
          ./dist/build_source_package.sh -t dsc

      - name: Test building with Rust 1.41 backport patches
        run: |
          rustup install 1.41.0
          mkdir temp
          cd temp
          dpkg-source -x ../dist/output/debian/*.dsc
          cd ipmi-fan-control-*/
          cargo +1.41.0 check --release

      - name: Install osc
        run: |
          sudo apt-get -y update
          sudo apt-get -y install libarchive-tools osc python3-m2crypto

      - name: Publish source packages to OBS
        env:
          OSC_CONFIG: ${{ secrets.osc }}
          VERSION: ${{ needs.create_release.outputs.version }}
        run: |
          shopt -s extglob

          if [[ "${VERSION}" == 0.0.0.* ]]; then
              project=home:chenxiaolong-bot:test
          else
              project=home:chenxiaolong:ipmi-fan-control
          fi

          cd dist/output
          echo "${OSC_CONFIG}" > oscrc
          osc -c oscrc co "${project}"

          cd "${project}/ipmi-fan-control"
          find -mindepth 1 -maxdepth 1 -type f -delete

          bsdtar -xf ../../rpm/*.src.rpm
          cp ../../pkgbuild/* .
          cp ../../debian/!(*_source.*) .

          sha512sum *

          osc -c ../../oscrc addremove
          osc -c ../../oscrc commit -m "GitHub Actions automated import of version ${VERSION}"
